{
  "editors": "[\"132035\",\"5napq\",\"4e4mz\",\"13kk2\",\"3iew1\",\"2izp0\",\"a8470c\",\"5de6f0\",\"ff941b\",\"58il7\",\"4bj6j\",\"568c3f\",\"13212f\",\"5v25k\",\"main\"]",
  "editor_132035": "{\"id\":\"132035\",\"title\":\"kick-a\",\"value\":\"import { sin } from '/dsp/osc/index.js'\\nimport clip from '/dsp/softclip/index.js'\\nimport arp from '/dsp/arp.js'\\nimport envelope from '/dsp/envelope/index.js'\\n\\nexport default t => {\\n  var kick =\\n    + sin(t, 19.5) * arp(t, 1/4, 37, 31, 13)\\n    + (arp(t, 1/4, 38.5, 48, 40)\\n    + arp(t, 1/4, 35, 49, 40))\\n    * envelope(t, 1/4, 42, 42, 20) * 1\\n  kick = clip(kick, 1)\\n  return kick * .8\\n}\",\"controlEditor\":{\"id\":\"5napq\"}}",
  "editor_5napq": "{\"id\":\"5napq\",\"title\":\"kicks\",\"value\":\"import Reverb from '/dsp/freeverb/index.js'\\n// import kick from './kick-a'\\nimport kick from './kick-b'\\nimport Stutter from '/dsp/stutter.js'\\nimport Nopop from '/dsp/nopop.js'\\nimport Gate from '/dsp/gate.js'\\n\\nexport const bars = Infinity\\n\\nexport default async (context) => {\\n  const { beat } = context.lengths\\n  const reverb = await Reverb(context)\\n  const stutter = await Stutter(context, 4, 8)\\n  const nopop = await Nopop(context, .02, .03)\\n  const gate = await Gate(context)\\n\\n  return mix => mix(\\n    t => kick(t), // * ((t%8) < 7),\\n    // t => {\\n      // const kickSlice = t.output[0].slice(0,beat)\\n      // t.output[0].set(kickSlice.slice(0,-(beat*(1/2))), beat*(7+1/2))\\n      // t.output[0].set(reverse(t).slice(-beat+10), t.output[0].length - beat)\\n      // return t.output[0]\\n    // },\\n    t => ((t/4)%8<7) ? t.input : stutter(t),\\n    // t => stutter(t),\\n    t => gate(t),\\n    t => nopop(t),\\n    // t => t.output[0].reverse(),\\n    t => reverb(t, { feedback: .8, damp: .2, wet: .33 })*2.8,\\n  )\\n}\\n\\nconst reverse = t => t.output[0].slice().reverse()\\n\\n\",\"controlEditor\":{\"id\":\"5napq\"}}",
  "editor_4e4mz": "{\"id\":\"4e4mz\",\"title\":\"hihats\",\"value\":\"import { sin } from '/dsp/osc/index.js'\\nimport Reverb from '/dsp/freeverb/index.js'\\nimport Stereoify from '/dsp/stereoify.js'\\nimport Stutter from '/dsp/stutter.js'\\nimport Hihat from './hihat'\\n\\nexport const channels = 2\\nexport const bars = Infinity\\n\\nexport default async (context) => {\\n  const ch = await Hihat(context, 1/16, 350)\\n  const oh = await Hihat(context, 1/4, 124)\\n  const reverb = await Reverb(context)\\n  const stereoify = await Stereoify(context)\\n  const stutter = await Stutter(context, 4, 32)\\n  \\n  return mix => mix(\\n    t =>\\n      + ch(t)*(sin(t,6)*1)*2.8\\n      + oh(t+1/2)*3.7,\\n    t => ((t/4)%8<7) ? t.input : stutter(t),\\n    t => reverb(t, { feedback: .2, damp: .2, wet: .27 }),\\n    t => stereoify(t)\\n  )\\n}\",\"controlEditor\":{\"id\":\"4e4mz\"}}",
  "editor_13kk2": "{\"id\":\"13kk2\",\"title\":\"basses\",\"value\":\"import { saw, sin, sqr } from '/dsp/osc/index.js'\\nimport Stereoify from '/dsp/stereoify.js'\\nimport note from '/dsp/note/index.js'\\nimport Bass from './bass'\\n\\nexport const channels = 2\\nexport const bars = Infinity\\n\\nconst melody = [7,4,8].map(n => note(n+15))\\n\\nexport default async (context) => {\\n  const bass = await Bass(context, { melody })\\n  const stereoify = await Stereoify(context)\\n  \\n  return mix => mix(\\n    t => (t/4)%4 < 2 \\n      ? bass(t, { cut: 0.122 + sin(t, 1/128) * 0.060 })*.7 \\n      : bass(t, { cut: 0.102 + sin(t, 1/128) * 0.060 })*.75,\\n    t => stereoify(t)\\n  )\\n}\",\"controlEditor\":{\"id\":\"13kk2\"}}",
  "editor_3iew1": "{\"id\":\"3iew1\",\"title\":\"textures-a\",\"value\":\"import clip from '/dsp/softclip/index.js'\\nimport { saw, sin, sqr } from '/dsp/osc/index.js'\\nimport arp from '/dsp/arp.js'\\nimport envelope from '/dsp/envelope/index.js'\\nimport { Filter, lowpass, highpass } from '/dsp/biquad.js'\\nimport note from '/dsp/note/index.js'\\nimport slide from '/dsp/slide.js'\\nimport Stereoify from '/dsp/stereoify.js'\\n\\nconst Melody = [1,3,33,55].map(n => note(n+15))\\n\\nexport const channels = 2\\nexport const bars = Infinity\\n\\nexport default async (context) => {\\n  const lpf = await Filter(context)\\n  const hpf = await Filter(context)\\n  const hp = highpass(context, { cut: 360, res: 2.9 })\\n  const stereoify = await Stereoify(context)\\n  let n = 0\\n  return mix => mix(\\n    t => {\\n      n = slide(t*64, .002, .02, Melody)\\n      return 0\\n        + (0\\n        + saw(t, n) * .09\\n        + sqr(t, n*1.26) * .07\\n        // + saw(t*2, n*3.26) * .05\\n        )\\n        * envelope(t, 1/64, 100, 20) * 1.2\\n    },\\n    t => lpf(t, lowpass(t, { \\n      cut: 600 + (540 * sin(t, 1/16)), \\n      res: 5.99 \\n    })),\\n    t => hpf(t, hp), \\n    t => stereoify(t),\\n  )\\n}\\n\",\"controlEditor\":{\"id\":\"3iew1\"}}",
  "editor_2izp0": "{\"id\":\"2izp0\",\"title\":\"textures-b\",\"value\":\"import clip from '/dsp/softclip/index.js'\\nimport { saw, sin, sqr } from '/dsp/osc/index.js'\\nimport arp from '/dsp/arp.js'\\nimport envelope from '/dsp/envelope/index.js'\\nimport Moogladder from '/dsp/moogladder.js'\\nimport note from '/dsp/note/index.js'\\nimport slide from '/dsp/slide.js'\\nimport Stereoify from '/dsp/stereoify.js'\\n\\nconst Melody = [1,3,33,55].map(n => note(n+15))\\n\\nexport const channels = 2\\nexport const bars = Infinity\\n\\nexport default async (context) => {\\n  const filter = await Moogladder(context)\\n  const stereoify = await Stereoify(context)\\n  let n = 0\\n  return mix => mix(\\n    t => {\\n      n = slide(t*64, .002, .02, Melody)\\n      return 0\\n        + (0\\n        + saw(t, n) * .09\\n        + sqr(t, n*1.26) * .07\\n        // + saw(t*2, n*3.26) * .05\\n        )\\n        * envelope(t, 1/64, 100, 20) * 1.2\\n    },\\n    t => filter(t, filter.set({ \\n      cut: 600 + sin(t, 1/16) * 400, \\n      res: 2, \\n      sat: 1 \\n    }))*10,\\n    t => stereoify(t),\\n  )\\n}\\n\",\"controlEditor\":{\"id\":\"2izp0\"}}",
  "editor_a8470c": "{\"id\":\"a8470c\",\"title\":\"kick-b\",\"value\":\"import { sin } from '/dsp/osc/index.js'\\nimport clip from '/dsp/softclip/index.js'\\nimport arp from '/dsp/arp.js'\\nimport envelope from '/dsp/envelope/index.js'\\n\\nexport default t => {\\n  var kick =\\n    + sin(t, 24.5) * arp(t, 1/4, 37, 31, 13)\\n    + (arp(t, 1/4, 38.5, 48, 40)\\n    + arp(t, 1/4, 35, 49, 40))\\n    * envelope(t, 1/4, 42, 42, 20) * 1\\n  kick = clip(kick, 1)\\n  return kick * .8\\n}\",\"controlEditor\":{\"id\":\"5napq\"}}",
  "editor_5de6f0": "{\"id\":\"5de6f0\",\"title\":\"bass\",\"value\":\"import DiodeFilter from '/dsp/diodefilter/index.js'\\nimport Wavetable from '/dsp/wavetable-osc/index.js'\\nimport slide from '/dsp/slide.js'\\nimport clip from '/dsp/softclip/index.js'\\nimport arp from '/dsp/arp.js'\\n\\nexport default async (context, { \\n  res = 0.88, \\n  hpf = .003, \\n  melody = Melody \\n} = {}) => {\\n  const filter = new DiodeFilter()\\n\\n  const osc = Wavetable(context, 'saw', 1024);\\n  const lfo = Wavetable(context, 'sin', 512);\\n  const lfo2 = Wavetable(context, 'sin', 512);\\n\\n  let n = 0.0\\n  let synth_osc = 0.0\\n  let synth = 0.0\\n  \\n  return (t, { cut = 0.072, res = 0.68, hpf = .00009 } = {}) => {\\n    filter.res(res)\\n    filter.hpf(hpf)\\n    filter.cut(cut + lfo(1.33)*.0055)\\n    // ((lfo(1) * .6 + 1.2) / 2) \\n  // * (0.370 + lfo2(.02) * 0.04))\\n\\n    n = slide(t, 1/8, 2, melody)\\n\\n    synth_osc = osc(n)\\n    synth = arp(t+.6, 1/2, synth_osc, 3, 2.15)\\n\\n    synth = filter.run(synth * .6)\\n    synth = clip(synth * 5)\\n\\n    return 0.5 * synth\\n  }\\n}\\n\",\"controlEditor\":{\"id\":\"13kk2\"}}",
  "editor_ff941b": "{\"id\":\"ff941b\",\"title\":\"hihat\",\"value\":\"import envelope from '/dsp/envelope/index.js'\\nimport Wavetable from '/dsp/wavetable-osc/index.js'\\nimport arp from '/dsp/arp.js'\\nimport clip from '/dsp/softclip/index.js'\\n\\nexport default async (context, rate = 1/4, decay = 70) => {\\n  var hihat = 0\\n  var hihat_osc = Wavetable(context, 'noise', 15100, true)\\n  var hihat_delay = Array(100).fill(0)\\n\\n  return t => {\\n    hihat = hihat_osc(1.35)\\n    hihat *= arp(t, rate, 220, 60, decay)\\n    hihat = clip(hihat, .71)\\n    hihat *= arp(t, 1/16, 12000, 12.6, 60)\\n    hihat_delay.push(-hihat)\\n    hihat_delay.shift()\\n    return (\\n      + hihat\\n      + hihat_delay[98] * .8\\n      + hihat_delay[69] * .7\\n      // - hihat_delay[25] * .5\\n      - hihat_delay[72] * .8\\n    ) * .3\\n  }\\n}\",\"controlEditor\":{\"id\":\"4e4mz\"}}",
  "editor_58il7": "{\"id\":\"58il7\",\"title\":\"pads\",\"value\":\"import clip from '/dsp/softclip/index.js'\\nimport { saw, sin, sqr, tri } from '/dsp/osc/index.js'\\nimport arp from '/dsp/arp.js'\\nimport envelope from '/dsp/envelope/index.js'\\nimport Moogladder from '/dsp/moogladder.js'\\nimport note from '/dsp/note/index.js'\\nimport slide from '/dsp/slide.js'\\nimport Stereoify from '/dsp/stereoify.js'\\nimport { Filter, lowpass, highpass } from '/dsp/biquad.js'\\nimport Reverb from '/dsp/impulse-reverb.js'\\n\\nconst tp = 20\\nconst melody = [\\n  [3,8,11].map(n => note(n+tp)),\\n  [7,10,14].map(n => note(n+tp)),\\n]\\n\\nexport const channels = 2\\nexport const bars = 2\\n\\nexport default async (context) => {\\n  const filter = await Moogladder(context)\\n  const stereoify = await Stereoify(context)\\n  const hpf = await Filter(context)\\n  const hp = highpass(context, { cut: 260, res: .4 })\\n  const reverb = await Reverb(context, '/samples/impulses/r1_omni_48k.wav')\\n  // const reverb = await Reverb(context, '/samples/impulses/terrys_warehouse_omni.wav')\\n  // const reverb = await Reverb(context, '/samples/impulses/falkland_tennis_court_omni.wav')\\n  \\n  let c = [0,0,0]\\n  return mix => mix(\\n    t => {\\n      c = melody[(t/4)%2|0]\\n      return 0\\n        + (0\\n        + saw(t, c[0]/2) * .01\\n        + saw(t, c[0]) * .04\\n        + saw(t, c[1]/2) * .02\\n        + saw(t, c[1]) * .03\\n        + saw(t, c[2]/2) * .03\\n        + saw(t, c[2]) * .04\\n        // + saw(t, c[2]) * .07\\n        // + saw(t*2, n*3.26) * .05\\n        )\\n        * (1-envelope(t+1/2, 1/4, 3, 9)) * 2.2\\n        * (envelope(t+1/8, 1/3, 5.5, 2)) * 1\\n    },\\n    t => filter(t, filter.set({ \\n      cut: 4650, //600 + sin(t, 1/16) * 400, \\n      res: .8, \\n      sat: 1 \\n    }))*1.5,\\n    t => reverb(t,.42), \\n    t => hpf(t, hp),\\n    t => stereoify(t),\\n  )\\n}\\n\",\"controlEditor\":{\"id\":\"58il7\"}}",
  "editor_4bj6j": "{\"id\":\"4bj6j\",\"title\":\"vocals\",\"value\":\"import fetchSample from '/dsp/fetch-sample.js'\\nimport resample from './resample'\\nimport Reverb from '/dsp/impulse-reverb.js'\\nimport Stutter from './stutter'\\nimport Delay from '/dsp/delay.js'\\n\\nexport const bars = Infinity\\n\\nexport default async (context) => {\\n  // http://ccmixter.org/content/MissJudged/MissJudged_-_The_World_Ends.mp3')\\n  const reverb = await Reverb(context, '/samples/impulses/r1_omni_48k.wav')\\n  const stutter = await Stutter(context, 1/4, 8)\\n  const delay = await Delay(context)\\n  const vocal = await fetchSample('/samples/vocals/MissJudged_-_The_World_Ends.mp3')\\n\\n  let begin \\n  begin = msToSamples(context, 180)\\n  const vocal_part_1 = vocal.subarray(\\n    begin, \\n    begin + context.lengths.bar*2\\n  )\\n  begin = msToSamples(context, 3580)\\n  const vocal_part_2 = vocal.subarray(\\n    begin, \\n    begin + context.lengths.bar*2\\n  )\\n  const vocals = [vocal_part_1, vocal_part_2]\\n  return mix => mix(\\n    t => resample(t, vocals[((t/8)%2)|0], 1.12)*1.5,\\n    t => {\\n      return t.input + delay(t, {\\n        feedback: .9,\\n        delay: Math.floor(\\n          (1/[2,4,64,128,4,16,32,64][Math.floor((t*4)%8)]) \\n        * context.lengths.bar/2)\\n      })*.6\\n    },\\n    t => stutter(t),\\n    t => reverb(t, .12),\\n  )\\n}\\n\\nconst msToSamples = ({ sampleRate }, ms) => {\\n  return Math.floor(sampleRate / 1000 * ms)\\n}\\n\",\"controlEditor\":{\"id\":\"4bj6j\"}}",
  "editor_568c3f": "{\"id\":\"568c3f\",\"title\":\"resample\",\"value\":\"import toFinite from '/dsp/to-finite.js'\\n\\nexport default (context, sample, scale) => {\\n  return toFinite(\\n    sample[\\n      ((context.n % sample.length)\\n    * (1 / scale)|0)\\n    ]\\n  )\\n}\\n\",\"controlEditor\":{\"id\":\"4bj6j\"}}",
  "editor_13212f": "{\"id\":\"13212f\",\"title\":\"stutter\",\"value\":\"export default async (context, d = 1, s = 32) => {\\n  const bar = context.totalLength\\n  const add = []\\n  for (let x = 0; x < 1000; x++) {\\n    add.push((((Math.random() * s | 0)/s) * bar) | 0)\\n  }\\n  let i = 0\\n  return t => t.output[0][((i++ % Math.floor(bar/d)) +\\n    (add[(t*1) % add.length | 0])\\n  ) % bar]\\n}\\n\",\"controlEditor\":{\"id\":\"4bj6j\"}}",
  "editor_5v25k": "{\"id\":\"5v25k\",\"title\":\"snare\",\"value\":\"import clip from '/dsp/softclip/index.js'\\nimport { sin, tri, sqr } from '/dsp/osc/index.js'\\nimport Wavetable from '/dsp/wavetable-osc/index.js'\\nimport envelope from '/dsp/envelope/index.js'\\nimport arp from '/dsp/arp.js'\\nimport Reverb from '/dsp/freeverb/index.js'\\nimport Stutter from '/dsp/stutter.js'\\n\\nexport const bars = Infinity\\n\\nexport default async (context) => {\\n  const reverb = await Reverb(context)\\n  const stutter = await Stutter(context, 1, 16)\\n  var snare = 0\\n  var snare_osc = Wavetable(context, 'noise', 5000, true)\\n  var snare_delay = Array(60).fill(0)\\n\\n  return mix => mix(t => {\\n    snare =0\\n      + sqr(t, 225) * .7\\n      //+ tri(t, bassline[2]*4 + sin(t, 30) * .04) * 2.3\\n    snare *= arp(t, 1/4, 20, 40, 40) * 1.2\\n    snare += snare_osc(3.1) * 3.8\\n    snare =\\n      + snare * envelope(t+1, 1/2, 17.67, 5) * .3\\n      + snare * envelope(t+1, 1/2, 90, 5) * 1.2\\n      + snare * envelope(t+1, 1/2, 40, 40) * 1.1\\n    snare *= .12\\n    snare_delay.push(-snare)\\n    snare_delay.shift()\\n    \\n    return clip(0\\n      + snare\\n      // + snare_delay[47] * .3\\n      + snare_delay[55] * .2\\n      + snare_delay[2] * .4\\n      , .25) * .23\\n  },\\n  t => ((t/4)%8<7) ? t.input : stutter(t),\\n  t => reverb(t, { feedback: .7, damp: .4, wet: .5 })*2.5,\\n  )\\n}\",\"controlEditor\":{\"id\":\"5v25k\"}}",
  "editor_main": "{\"id\":\"main\",\"title\":\"main\",\"value\":\"export default t => 0\\n\",\"controlEditor\":{\"id\":\"main\"}}"
}